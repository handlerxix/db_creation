/*
 * This file is generated by jOOQ.
 */
package generated.tables;

import generated.Keys;
import generated.Public;
import generated.tables.records.WaybillRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Waybill extends TableImpl<WaybillRecord> {

    /**
     * The reference instance of <code>public.waybill</code>
     */
    public static final Waybill WAYBILL = new Waybill();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>public.waybill.id</code>.
     */
    public final TableField<WaybillRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>public.waybill.date</code>.
     */
    public final TableField<WaybillRecord, OffsetDateTime> DATE = createField(DSL.name("date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");
    /**
     * The column <code>public.waybill.company_id</code>.
     */
    public final TableField<WaybillRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false), this, "");
    private transient Company _company;

    /**
     * Create an aliased <code>public.waybill</code> table reference
     */
    public Waybill(String alias) {
        this(DSL.name(alias), WAYBILL);
    }

    /**
     * Create an aliased <code>public.waybill</code> table reference
     */
    public Waybill(Name alias) {
        this(alias, WAYBILL);
    }

    /**
     * Create a <code>public.waybill</code> table reference
     */
    public Waybill() {
        this(DSL.name("waybill"), null);
    }

    public <O extends Record> Waybill(Table<O> child, ForeignKey<O, WaybillRecord> key) {
        super(child, key, WAYBILL);
    }

    private Waybill(Name alias, Table<WaybillRecord> aliased) {
        this(alias, aliased, null);
    }

    private Waybill(Name alias, Table<WaybillRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WaybillRecord> getRecordType() {
        return WaybillRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<WaybillRecord, Integer> getIdentity() {
        return (Identity<WaybillRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<WaybillRecord> getPrimaryKey() {
        return Keys.WAYBILL_PK;
    }

    @Override
    public List<ForeignKey<WaybillRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WAYBILL__WAYBILL_COMPANY_ID_FKEY);
    }

    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.WAYBILL__WAYBILL_COMPANY_ID_FKEY);

        return _company;
    }

    @Override
    public Waybill as(String alias) {
        return new Waybill(DSL.name(alias), this);
    }

    @Override
    public Waybill as(Name alias) {
        return new Waybill(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Waybill rename(String name) {
        return new Waybill(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Waybill rename(Name name) {
        return new Waybill(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, OffsetDateTime, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
